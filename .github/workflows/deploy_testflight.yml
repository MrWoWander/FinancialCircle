name: Deploy to TestFlight

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: macos-latest
    environment: Main

    steps:
      # Шаг 1: Клонирование репозитория
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Установка Ruby и Fastlane
      - name: Setup Ruby and Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0
      - run: gem install fastlane

      # Шаг 3: Создание AuthKey.p8 файла
      - name: Create AuthKey.p8 file
        run: |
          echo "${{ secrets.APP_STORE_CONNECT_KEY }}" > AuthKey.p8
          cat AuthKey.p8 | head -n 5  # Проверяем первые строки файла

      # Шаг 4: Скачивание сертификатов и профилей
      - name: Download Certificates and Profiles
        run: |
          cat <<EOF > download_certificates.rb
          require 'spaceship'

          begin
            # Авторизация через API
            Spaceship::ConnectAPI.token = Spaceship::ConnectAPI::Token.create(
              key_id: ENV['API_KEY_ID'],
              issuer_id: ENV['API_ISSUER_ID'],
              filepath: 'AuthKey.p8'
            )

            # Скачивание сертификатов
            certificates = Spaceship::ConnectAPI::Certificate.all
            certificates.each do |cert|
              File.write("#{cert.name}.cer", cert.download_content)
              puts "Downloaded Certificate: #{cert.name}.cer"
            end

            # Скачивание профилей
            profiles = Spaceship::ConnectAPI::Profile.all
            profiles.each do |profile|
              File.write("#{profile.name}.mobileprovision", profile.fetch_download_file)
              puts "Downloaded Provisioning Profile: #{profile.name}.mobileprovision"
            end
          rescue => e
            puts "Error occurred: #{e.message}"
            puts e.backtrace
            exit 1
          end
          EOF

          ruby download_certificates.rb

      # Шаг 5: Установка сертификатов и профилей
      - name: Install Certificates and Profiles
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Создаем временный keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" signing_temp.keychain
          security set-keychain-settings -lut 21600 signing_temp.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" signing_temp.keychain

          # Импортируем сертификаты
          for cert in *.cer; do
            security import "$cert" -k signing_temp.keychain -A
          done

          # Копируем provisioning profiles
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp *.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles

      # Шаг 4: Поиск имени проекта
      - name: Find .xcodeproj File
        id: find_project
        run: |
          echo "Looking for .xcodeproj file in repository root..."
          PROJECT_FILE=$(find . -maxdepth 1 -name "*.xcodeproj" | head -n 1)
          if [ -z "$PROJECT_FILE" ]; then
            echo "❌ No .xcodeproj file found in the repository root!"
            exit 1
          fi
          PROJECT_NAME=$(basename "$PROJECT_FILE" .xcodeproj)
          echo "✅ Found .xcodeproj file: $PROJECT_FILE"
          echo "✅ Project Name: $PROJECT_NAME"
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
          echo "PROJECT_FILE=$PROJECT_FILE" >> $GITHUB_ENV

      # Шаг 5: Сборка приложения
      - name: Build iOS app
        run: |
          xcodebuild clean archive \
            -project "${PROJECT_FILE}" \
            -scheme "${PROJECT_NAME}" \
            -archivePath "${{ github.workspace }}/build/${PROJECT_NAME}.xcarchive" \
            -sdk iphoneos \
            -authenticationKeyID "${{ secrets.API_KEY_ID }}" \
            -authenticationKeyIssuerID "${{ secrets.API_ISSUER_ID }}" \
            DEVELOPMENT_TEAM="${{ secrets.DEVELOPMENT_TEAM_ID }}" \
            PROVISIONING_PROFILE_SPECIFIER="FC" \
            -allowProvisioningUpdates

      # Шаг 6: Создание файла ExportOptions.plist
      - name: Create ExportOptions.plist
        run: |
          cat <<EOF > ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>${{ secrets.DEVELOPMENT_TEAM_ID }}</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>ru.bpmteamsnew.financial-circle</key>
                  <string>FC Dist</string>
              </dict>
              <key>uploadSymbols</key>
              <true/>
              <key>uploadBitcode</key>
              <false/>
          </dict>
          </plist>
          EOF

      # Шаг 7: Экспорт архива в .ipa
      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath "${{ github.workspace }}/build/${PROJECT_NAME}.xcarchive" \
            -exportPath "${{ github.workspace }}/build" \
            -exportOptionsPlist ExportOptions.plist \
            -authenticationKeyID "${{ secrets.API_KEY_ID }}" \
            -authenticationKeyIssuerID "${{ secrets.API_ISSUER_ID }}" \
            DEVELOPMENT_TEAM="${{ secrets.DEVELOPMENT_TEAM_ID }}" \
            PROVISIONING_PROFILE_SPECIFIER="FC Dist" \
            -allowProvisioningUpdates

      # Шаг 8: Загрузка .ipa в TestFlight
      - name: Upload to TestFlight
        uses: Apple-Actions/upload-testflight-build@master
        with:
          app-path: "${{ github.workspace }}/build/${{ env.PROJECT_NAME }}.ipa"
          issuer-id: ${{ secrets.API_ISSUER_ID }}
          api-key-id: ${{ secrets.API_KEY_ID }}
          api-private-key: ${{ secrets.APP_STORE_CONNECT_KEY }}
            # Шаг 6: Удаление временных файлов

      - name: Cleanup
        run: |
          rm -f *.cer *.mobileprovision AuthKey.p8 download_certificates.rb