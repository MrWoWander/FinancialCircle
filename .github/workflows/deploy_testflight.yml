name: Deploy to TestFlight

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: macos-latest
    environment: Main

    steps:
      # Шаг 1: Клонирование репозитория
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Установка Fastlane
      - name: Install Fastlane
        run: |
          gem install fastlane

      - name: Create api_key.json
        run: |
          cat <<EOF > api_key.json
          {
            "key_id": "${{ secrets.API_KEY_ID }}",
            "issuer_id": "${{ secrets.API_ISSUER_ID }}",
            "key": "${{ secrets.APP_STORE_CONNECT_KEY }}",
            "in_house": false
          }
          EOF

          echo "Generated api_key.json:"
          cat api_key.json

      - name: Setup Keychain
        run: |
          security create-keychain -p my_temp_password build.keychain
          security list-keychains -s build.keychain
          security unlock-keychain -p my_temp_password build.keychain
          security set-keychain-settings -lut 3600 build.keychain

      # Шаг 3: Скачивание сертификатов
      - name: Download Signing Certificates
        run: |
          fastlane sync_code_signing \
            --api_key_path ./api_key.json \
            --keychain_name build.keychain \
            --readonly true

      # Шаг 4: Скачивание профилей подписывания
      - name: Download Provisioning Profiles
        run: |
          fastlane sigh download_all \
            --api_key_path ./api_key.json \
            --output_path ./provisioning_profiles

      # Шаг 5: Импорт сертификатов
      - name: Import Certificates
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp ./provisioning_profiles/*.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          for CERT in ./certificates/*.p12; do
            security import "$CERT" -k ~/Library/Keychains/login.keychain-db -P "" -T /usr/bin/codesign
          done

      # Шаг 4: Поиск имени проекта
      - name: Find .xcodeproj File
        id: find_project
        run: |
          echo "Looking for .xcodeproj file in repository root..."
          PROJECT_FILE=$(find . -maxdepth 1 -name "*.xcodeproj" | head -n 1)
          if [ -z "$PROJECT_FILE" ]; then
            echo "❌ No .xcodeproj file found in the repository root!"
            exit 1
          fi
          PROJECT_NAME=$(basename "$PROJECT_FILE" .xcodeproj)
          echo "✅ Found .xcodeproj file: $PROJECT_FILE"
          echo "✅ Project Name: $PROJECT_NAME"
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
          echo "PROJECT_FILE=$PROJECT_FILE" >> $GITHUB_ENV

      # Шаг 5: Сборка приложения
      - name: Build iOS app
        run: |
          xcodebuild clean archive \
            -project "${PROJECT_FILE}" \
            -scheme "${PROJECT_NAME}" \
            -archivePath "${{ github.workspace }}/build/${PROJECT_NAME}.xcarchive" \
            -sdk iphoneos \
            -authenticationKeyID "${{ secrets.API_KEY_ID }}" \
            -authenticationKeyIssuerID "${{ secrets.API_ISSUER_ID }}" \
            DEVELOPMENT_TEAM="${{ secrets.DEVELOPMENT_TEAM_ID }}" \
            PROVISIONING_PROFILE_SPECIFIER="FC" \
            -allowProvisioningUpdates

      # Шаг 6: Создание файла ExportOptions.plist
      - name: Create ExportOptions.plist
        run: |
          cat <<EOF > ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>${{ secrets.DEVELOPMENT_TEAM_ID }}</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>ru.bpmteamsnew.financial-circle</key>
                  <string>FC Dist</string>
              </dict>
              <key>uploadSymbols</key>
              <true/>
              <key>uploadBitcode</key>
              <false/>
          </dict>
          </plist>
          EOF

      # Шаг 7: Экспорт архива в .ipa
      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath "${{ github.workspace }}/build/${PROJECT_NAME}.xcarchive" \
            -exportPath "${{ github.workspace }}/build" \
            -exportOptionsPlist ExportOptions.plist \
            -authenticationKeyID "${{ secrets.API_KEY_ID }}" \
            -authenticationKeyIssuerID "${{ secrets.API_ISSUER_ID }}" \
            DEVELOPMENT_TEAM="${{ secrets.DEVELOPMENT_TEAM_ID }}" \
            PROVISIONING_PROFILE_SPECIFIER="FC Dist" \
            -allowProvisioningUpdates

      # Шаг 8: Загрузка .ipa в TestFlight
      - name: Upload to TestFlight
        uses: Apple-Actions/upload-testflight-build@master
        with:
          app-path: "${{ github.workspace }}/build/${{ env.PROJECT_NAME }}.ipa"
          issuer-id: ${{ secrets.API_ISSUER_ID }}
          api-key-id: ${{ secrets.API_KEY_ID }}
          api-private-key: ${{ secrets.APP_STORE_CONNECT_KEY }}