name: Build and Upload to TestFlight

on:
  push:
    branches:
      - main

jobs:
  build-and-upload:
    name: Build and Upload to TestFlight
    runs-on: macos-latest
    environment: Main

    steps:
      # 1. Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v3

      # # 2. Установка SSH для доступа к хранилищу сертификатов (если используется SSH)
      # - name: Set up SSH
      #   if: secrets.SSH_PRIVATE_KEY
      #   run: |
      #     mkdir -p ~/.ssh
      #     echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
      #     chmod 600 ~/.ssh/id_rsa
      #     ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

      # 3. Установка Fastlane
      - name: Install Fastlane
        run: gem install fastlane

      # 4. Поиск .xcodeproj файла
      - name: Find .xcodeproj File
        id: find_project
        run: |
          PROJECT_FILE=$(find . -maxdepth 1 -name "*.xcodeproj" | head -n 1)
          if [ -z "$PROJECT_FILE" ]; then
            echo "❌ No .xcodeproj file found!"
            exit 1
          fi
          echo "Found project: $PROJECT_FILE"
          echo "PROJECT_NAME=$(basename $PROJECT_FILE .xcodeproj)" >> $GITHUB_ENV

      # 5. Извлечение BUNDLE_IDENTIFIER из project.pbxproj
      - name: Extract BUNDLE_IDENTIFIER
        id: extract_bundle_id
        run: |
          PBXPROJ_PATH="${{ env.PROJECT_NAME }}.xcodeproj/project.pbxproj"
          if [ ! -f "$PBXPROJ_PATH" ]; then
            echo "❌ File $PBXPROJ_PATH not found!"
            exit 1
          fi
          BUNDLE_IDENTIFIER=$(grep -m 1 'PRODUCT_BUNDLE_IDENTIFIER' "$PBXPROJ_PATH" | sed -e 's/.*PRODUCT_BUNDLE_IDENTIFIER = //' -e 's/;//')
          if [ -z "$BUNDLE_IDENTIFIER" ]; then
            echo "❌ Bundle Identifier not found in $PBXPROJ_PATH!"
            exit 1
          fi
          echo "Extracted BUNDLE_IDENTIFIER: $BUNDLE_IDENTIFIER"
          echo "BUNDLE_IDENTIFIER=$BUNDLE_IDENTIFIER" >> $GITHUB_ENV

      # 6. Создание файла api_key.json для App Store Connect
      - name: Create api_key.json
        run: |
          cat <<EOF > api_key.json
          {
            "key_id": "${{ secrets.API_KEY_ID }}",
            "issuer_id": "${{ secrets.API_ISSUER_ID }}",
            "key": "${{ secrets.APP_STORE_CONNECT_KEY }}",
            "in_house": false
          }
          EOF

      # 7. Синхронизация сертификатов и профилей для Development
      - name: Sync Development Provisioning Profiles
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        run: |
          fastlane match development \
            --app_identifier "${{ env.BUNDLE_IDENTIFIER }}" \
            --api_key_path api_key.json

      # 8. Синхронизация сертификатов и профилей для App Store
      - name: Sync App Store Provisioning Profiles
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        run: |
          fastlane match appstore \
            --app_identifier "${{ env.BUNDLE_IDENTIFIER }}" \
            --api_key_path api_key.json

      # 9. Сборка приложения
      - name: Build the app
        run: |
          fastlane gym --scheme "${{ env.PROJECT_NAME }}" --export-method app-store

      # 10. Загрузка в TestFlight
      - name: Upload to TestFlight
        run: |
          fastlane pilot upload --api_key_path api_key.json